# core HAL config file for simulation

# first load all the RT modules that will be needed
# kinematics
loadrt tripodkins
setp tripodkins.Bx 10
setp tripodkins.Cx 5
setp tripodkins.Cy 7.071

# motion controller, get name and thread periods from ini file
loadrt [EMCMOT]EMCMOT base_period_nsec=[EMCMOT]BASE_PERIOD servo_period_nsec=[EMCMOT]SERVO_PERIOD traj_period_nsec=[EMCMOT]TRAJ_PERIOD key=[EMCMOT]SHMEM_KEY
# 6 differentiators (for velocity and accel sigs)
loadrt ddt count=6

# add motion controller functions to servo thread
addf motion-command-handler servo-thread
addf motion-controller servo-thread
# link the differentiator functions into the code
addf ddt.0 servo-thread
addf ddt.1 servo-thread
addf ddt.2 servo-thread
addf ddt.3 servo-thread
addf ddt.4 servo-thread
addf ddt.5 servo-thread

# create HAL signals for position commands from motion module
# loop position commands back to motion module feedback
net J0pos axis.0.motor-pos-cmd => axis.0.motor-pos-fb ddt.0.in
net J1pos axis.1.motor-pos-cmd => axis.1.motor-pos-fb ddt.2.in
net J2pos axis.2.motor-pos-cmd => axis.2.motor-pos-fb ddt.4.in

# send the position commands thru differentiators to
# generate velocity and accel signals
net J0vel ddt.0.out => ddt.1.in hypot.0.in0
net J0acc <= ddt.1.out 
net J1vel ddt.2.out => ddt.3.in hypot.0.in1
net J1acc <= ddt.3.out 
net J2vel ddt.4.out => ddt.5.in hypot.1.in0
net J2acc <= ddt.5.out 

# estop loopback
net estop-loop iocontrol.0.user-enable-out => iocontrol.0.emc-enable-in

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare => iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change => iocontrol.0.tool-changed

# amp control
net J0ena <= axis.0.amp-enable-out
net J1ena <= axis.1.amp-enable-out
net J2ena <= axis.2.amp-enable-out

net J0flt => axis.0.amp-fault-in
net J1flt => axis.1.amp-fault-in
net J2flt => axis.2.amp-fault-in
