# HAL config file for MAX NC test machine
#######################################################
# first load all the HAL modules we're going to need
#######################################################
# kinematics
loadrt trivkins
# main motion controller module
loadrt [EMCMOT]EMCMOT base_period_nsec=[EMCMOT]BASE_PERIOD servo_period_nsec=[EMCMOT]SERVO_PERIOD traj_period_nsec=[EMCMOT]TRAJ_PERIOD key=[EMCMOT]SHMEM_KEY num_joints=[TRAJ]AXES
# using steppers....
loadrt stepgen step_type=0,0,0
# I/O thru the parport
loadrt hal_parport cfg="0x0378"
# counting the spindle counter in software
loadrt counter num_chan=1
# misc blocks needed to do fun things
loadrt ddt count=6
# spindle speed pwm
loadrt pwmgen output_type=0
# spindle speed feedback
loadrt lowpass count=1
loadrt mult2 count=1
loadrt scale count=1

#######################################################
# add realtime functions to the threads
# first the high speed thread
#######################################################
# first we read parport inputs
addf parport.0.read		base-thread
# update counter
addf counter.update-counters    base-thread
# generate step and dir signals
addf stepgen.make-pulses	base-thread
# generate spindle pwm
addf pwmgen.make-pulses        base-thread
# write to outputs
addf parport.0.write		base-thread



# now the servo thread
########################################################
# capture axis and spindle positions
addf stepgen.capture-position	servo-thread
addf counter.capture-position	servo-thread
# process motion commands coming from user space
addf motion-command-handler	servo-thread
# run main motion controller
addf motion-controller		servo-thread
# differentiators to make vel and acc signals
addf ddt.0			servo-thread
addf ddt.1			servo-thread
addf ddt.2			servo-thread
addf ddt.3			servo-thread
addf ddt.4			servo-thread
addf ddt.5			servo-thread
# other misc blocks
addf scale.0			servo-thread
addf pwmgen.update              servo-thread
# update output info, axis and spindle
addf stepgen.update-freq	servo-thread
addf lowpass.0			servo-thread
addf mult2.0			servo-thread


#######################################################
# interconnections
#
# first, the basic stepper machine connections
#######################################################

# connect position commands from motion module to step generator
newsig Xpos-cmd float
linksp Xpos-cmd <= axis.0.motor-pos-cmd
linksp Xpos-cmd => stepgen.0.position-cmd
newsig Ypos-cmd float
linksp Ypos-cmd <= axis.1.motor-pos-cmd
linksp Ypos-cmd => stepgen.1.position-cmd
newsig Zpos-cmd float
linksp Zpos-cmd <= axis.2.motor-pos-cmd
linksp Zpos-cmd => stepgen.2.position-cmd

# connect position feedback from step generators
# to motion module
newsig Xpos-fb float
linksp Xpos-fb <= stepgen.0.position-fb
linksp Xpos-fb => axis.0.motor-pos-fb
newsig Ypos-fb float
linksp Ypos-fb <= stepgen.1.position-fb
linksp Ypos-fb => axis.1.motor-pos-fb
newsig Zpos-fb float
linksp Zpos-fb <= stepgen.2.position-fb
linksp Zpos-fb => axis.2.motor-pos-fb

# connect enable signals for step generators
newsig Xen bit
linksp Xen <= axis.0.amp-enable-out
linksp Xen => stepgen.0.enable
newsig Yen bit
linksp Yen <= axis.1.amp-enable-out
linksp Yen => stepgen.1.enable
newsig Zen bit
linksp Zen <= axis.2.amp-enable-out
linksp Zen => stepgen.2.enable

# connect signals to step pulse generator outputs
newsig Xstep bit
newsig Xdir  bit
newsig Ystep bit
newsig Ydir  bit
newsig Zstep bit
newsig Zdir  bit
linkps stepgen.0.step => Xstep
linkps stepgen.0.dir  => Xdir
linkps stepgen.1.step => Ystep
linkps stepgen.1.dir  => Ydir
linkps stepgen.2.step => Zstep
linkps stepgen.2.dir  => Zdir

#############################################################################
# Spindle Speed
# The spindle goes forward only
newsig spindle-forward bit
linkps motion.spindle-forward => spindle-forward
linksp spindle-forward => pwmgen.0.enable

# PID is not used to give closed-loop spindle speed control, because at the
# highest speeds the software-based counter cannot keep up (note: with 'counter',
# it can)
# Instead, this offset and scale have been determined emperically
# -- if these numbers are accurate, then top speed at this gearing is about
# 1200 rpm
#
# note that this does not depend on the base_period, unlike freqgen
# gain = 1/1128 ~ .00089
# offset = .07
# PWM    Measured RPM
# 25%    200
# 50%    482
# 60%    595
setp scale.0.gain .00089
setp scale.0.offset .07

newsig spindle-speed-cmd float
linkps motion.spindle-speed-out => spindle-speed-cmd
linksp spindle-speed-cmd => scale.0.in
newsig spindle-speed-pwm float
linkps scale.0.out => spindle-speed-pwm
linksp spindle-speed-pwm => pwmgen.0.value

# Spindle speed feedback -- spindle-speed-fb-rpm can be metered or scoped
# but beware that at the highest speeds the software-based counter cannot
# keep up, and the speed is estimated incorrectly
newsig spindle-speed-fb-raw float
newsig spindle-speed-fb-filtered  float
newsig spindle-speed-fb-rpm  float

# The gain of the lowpass filter is a trade-off: Higher numbers track spindle
# speed better when the speed changes.  Lower numbers give a more steady
# estimate of average spindle speed when the speed is nominally constant
setp lowpass.0.gain 0.01
linkps counter.0.velocity => spindle-speed-fb-raw
linksp spindle-speed-fb-raw => lowpass.0.in
linkps lowpass.0.out => spindle-speed-fb-filtered

setp mult2.0.in0 60
linksp spindle-speed-fb-filtered mult2.0.in1
linkps mult2.0.out spindle-speed-fb-rpm
#############################################################################

# create a signal for the estop loopback
net estop-loop iocontrol.0.user-enable-out iocontrol.0.emc-enable-in

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change iocontrol.0.tool-changed

# create a signal for "spindle on"
newsig spindle_on bit
linksp spindle_on <= motion.spindle-on

# connect physical pins to the signals
linksp Xstep		=> parport.0.pin-03-out
linksp Xdir		=> parport.0.pin-02-out
linksp Ystep		=> parport.0.pin-05-out
linksp Ydir		=> parport.0.pin-04-out
linksp Zstep		=> parport.0.pin-07-out
linksp Zdir		=> parport.0.pin-06-out
# amp enable (active lo)
#linksp Xen		=> parport.0.pin-01-out
#setp parport.0.pin-01-out-invert 1

# spindle enable
linksp spindle_on	=> parport.0.pin-01-out
setp parport.0.pin-01-out-invert 1

net pwm pwmgen.0.pwm	=> parport.0.pin-14-out

#######################################################
# set scaling and other parameters of the basic machine

# set stepgen module scaling - get values from ini file
setp stepgen.0.position-scale [AXIS_0]SCALE
setp stepgen.1.position-scale [AXIS_1]SCALE
setp stepgen.2.position-scale [AXIS_2]SCALE

# set stepgen module accel limits - get values from ini file
# jmk said to set these to ini value + 5% to avoid stepgen bug
setp stepgen.0.maxaccel [AXIS_0]STEPGEN_MAXACCEL
setp stepgen.1.maxaccel [AXIS_1]STEPGEN_MAXACCEL
setp stepgen.2.maxaccel [AXIS_2]STEPGEN_MAXACCEL

# end of basic machine

newsig homeswitches bit
linkps parport.0.pin-10-in => homeswitches
linkps axis.0.home-sw-in <= homeswitches
linkps axis.2.home-sw-in <= homeswitches

#######################################################
# Beginning of threading-related stuff
#######################################################

# spindle counter
# connect encoder signals to counter counter
# B is not used because it is the counter module, not encoder
newsig spindle-phase-A bit
newsig spindle-phase-B bit
newsig spindle-phase-Z bit
linksp spindle-phase-A => counter.0.phase-A
linksp spindle-phase-Z => counter.0.phase-Z

linkps parport.0.pin-11-in => spindle-phase-A
linkps parport.0.pin-12-in => spindle-phase-B
linkps parport.0.pin-13-in => spindle-phase-Z

# (that way thread pitches can be straightforward,
#  a 20 tpi thread would multiply the counter output
#  by 1/20, etc)
setp counter.0.position-scale 1024

# hook up motion controller's spindle indexing pin
newsig spindle-index-enable bit
linkps motion.spindle-index-enable <=> spindle-index-enable
linksp spindle-index-enable <=> counter.0.index-enable

# report our revolution count to the motion controller
newsig spindle-pos float
linkps counter.0.position => spindle-pos
linksp spindle-pos => motion.spindle-revs


#######################################################
# make vel and accel sigs for testing
#######################################################

# send the position commands thru differentiators to
# generate velocity and accel signals (for testing)

# define the signals, and hook them up
newsig Xvel float
newsig Xacc float
linksp Xpos-cmd => ddt.0.in
linkps ddt.0.out => Xvel
linksp Xvel => ddt.1.in
linkps ddt.1.out => Xacc

newsig Yvel float
newsig Yacc float
linksp Ypos-cmd => ddt.2.in
linkps ddt.2.out => Yvel
linksp Yvel => ddt.3.in
linkps ddt.3.out => Yacc

newsig Zvel float
newsig Zacc float
linksp Zpos-cmd => ddt.4.in
linkps ddt.4.out => Zvel
linksp Zvel => ddt.5.in
linkps ddt.5.out => Zacc
